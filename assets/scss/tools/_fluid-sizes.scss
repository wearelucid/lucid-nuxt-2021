/*
 * fluid-size:
 * Precise Control over sizes:
 * Adapt a layout from a minimum size to a maximum size in a given range of screen widths
 *
 * Usage:
 * html {
 *   @include fluid-size('font-size', 320px, 1366px, 14px, 18px);
 *   // or like this
 *   @include fluid-size('font-size', 32.0rem, 136.6rem, 1.4rem, 1.8rem);
 * }
 * @params:
 * $properties: e.g. 'font-size', 'padding-top' etc.
 * $min-vw: below this viewport we don't see any change
 * $max-vw: above this viewport we don't see any change
 * $min-value: smallest value for property
 * $max-value: biggest value
 *
 * ⚠️  ! Beware:
 * Don't mix units. You can either use all parameters in px or in rem, but don't mix them.
 * Because Breakpoints should be set in pixel you should prefer px over other units.
 * (https://adamwathan.me/dont-use-em-for-media-queries/)
 *
 * ⚠️ ! Beware 2:
 *  Media queries declarations do not base themselves on the declared font-size that you apply to html!!!
 * instead they always use the default size - which as I said is 16px in pretty much all browsers.
 * Read more: https: //stackoverflow.com/questions/47409585/using-rem-units-in-media-queries-and-as-width
 *
 * ⚠️ ! Beware 3: Unitless fluid sizes
 * If you want to create fluid-sizes for line-heights, you have to indicate line-height with the unit 'em'. Unitless will mess things up.
 *
 */

@mixin fluid-size($properties, $min-vw, $max-vw, $min-value, $max-value) {
  @each $property in $properties {
    #{$property}: $min-value;
  }

  @media (min-width: $min-vw) {
    @each $property in $properties {
      #{$property}: calc(#{$min-value} + #{strip-unit($max-value - $min-value)} * (100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)});
    }
  }

  @media (min-width: $max-vw) {
    @each $property in $properties {
      #{$property}: $max-value;
    }
  }
}
