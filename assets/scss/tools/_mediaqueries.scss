/*
 * Tools – Mediaqueries
 *Inspired from https://github.com/guardian/sass-mq.git
 */

/*
 * To enable support for browsers that do not support @media queries,
 * (IE <= 8, Firefox <= 3, Opera <= 9) set $mqResponsive to false
 * Create a separate stylesheet served exclusively to these browsers,
 * meaning @media queries will be rasterized, relying on the cascade itself
 */
$mq-responsive: true;

/*
 * Name your breakpoints in a way that creates a ubiquitous language
 * across team members. It will improve communication between
 * stakeholders, designers, developers, and testers.
 */
$mq-breakpoints: (
  small: $s-size-breakpoint-375,
  reduced: $s-size-breakpoint-768,
  medium: $s-size-breakpoint-1440
);

/*
 * Define the breakpoint from the $mqBreakpoints list that should
 * be used as the target width when outputting a static stylesheet
 * (i.e. when $mqResponsive is set to 'false').
 */
$mq-static-breakpoint: small;

@function mq-get-breakpoint-width($name) {
  @if(map-has-key($mq-breakpoints, $name)) {
    @return map-get($mq-breakpoints, $name);
  } @else {
    @warn 'breakpoint #{$name} does not exist';
  }
}

/*
 * Main media query function
 * Usage Examples:
 * @include mq($from: medium) {…}
 * @include mq($from: 1150, $and: '(orientation: portrait)') {…}
 */
@mixin mq($from: false, $to: false, $and: false, $height: false, $media: all) {

  // Initialize variables
  $min-size: 0;
  $max-size: 0;
  $media-query: '';
  $axis: if($height, 'height', 'width');

  // From: this breakpoint (inclusive)
  @if $from {
    @if type-of($from) == number {
      $min-size: px-to-em($from, 16);
    } @else {
      $min-size: px-to-em(mq-get-breakpoint-width($from), 16);
    }
  }

  // To: that breakpoint (exclusive)
  @if $to {
    @if type-of($to) == number {
      $max-size: px-to-em($to, 16) - 0.01em;
    } @else {
      $max-size: px-to-em(mq-get-breakpoint-width($to), 16) - 0.01em;
    }
  }

  // Responsive support is disabled, rasterize the output outside @media blocks
  // The browser will rely on the cascade itself.
  @if ($mq-responsive == false) {
    $static-breakpoint-width: mq-get-breakpoint-width($mq-static-breakpoint);
    @if type-of($static-breakpoint-width) == number {
      $target-width: px-to-em($static-breakpoint-width, 16);
      // output only rules that start at or span our target width
      @if ($and == false and ($min-size <= $target-width) and (($to == false) or ($max-size >= $target-width))) {
        @content;
      }
    } @else {
      // throw a warning if $mq-static-breakpoint is not in the $mq-breakpoints list
      @warn 'no static styles will be output: #{$static-breakpoint-width}';
    }
  } @else { // responsive support is enabled, output rules inside @media queries
    @if $min-size != 0 { $media-query: '#{$media-query} and (min-#{$axis}: #{$min-size})'; }
    @if $max-size != 0 { $media-query: '#{$media-query} and (max-#{$axis}: #{$max-size})'; }
    @if $and { $media-query: '#{$media-query} and #{$and}'; }

    $media-query: unquote(#{$media-query});

    @media #{$media + $media-query} {
      @content;
    }
  }
}

/*
 * Add a breakpoint
 * Usage: $mqBreakpoints: mqAddBreakpoint(tvscreen, 1920px);
 */
@function mq-add-breakpoint($name, $breakpoint) {
  $new-breakpoint: ($name: $breakpoint);
  @return map-merge($mq-breakpoints, $new-breakpoint);
}

/*
 * Create JSON string of map of breakpoints
 */
@function mq-get-breakpoints-json($breakpoints: $mq-breakpoints) {
  $json: '{';

  @each $name in map-keys($breakpoints) {
    $value: map-get($breakpoints, $name);

    $json: $json + "'#{$name}': '#{$value}',"; // sass-lint:disable-line quotes
  }

  // remove last ","
  $json: str-slice($json, 1, str-length($json) - 1);

  // close json string
  $json: $json + '}';
  @return '#{$json}';
}

/*
 * Create JSON string of single breakpoint
 */
@function mq-get-breakpoint-json($name, $value) {
  @return '{ \'name\': \'#{$name}\', \'value\': \'#{$value}\' }';
}
